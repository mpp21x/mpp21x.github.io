<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>LeetCode(461) - Hamming Distance(js/easy)</title>
      <link href="/2020/05/14/2020/leetcode-461-js/"/>
      <url>/2020/05/14/2020/leetcode-461-js/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/hamming-distance/submissions/" target="_blank" rel="noopener">461. Hamming Distance</a></li><li>difficulty：<code>easy</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers x and y, calculate the Hamming distance.</p><p>Note:</p><p>0 ≤ <code>x</code>, <code>y</code> &lt; 2³¹.</p><p>Example：</p><pre><code>Input: x = 1, y = 4Output: 2Explanation:1   (0 0 0 1)4   (0 1 0 0)       ↑   ↑The above arrows point to positions where the corresponding bits are different.</code></pre><h3 id="how-to-solve-problem"><a href="#how-to-solve-problem" class="headerlink" title="how to solve problem"></a>how to solve problem</h3><p>We need to convert two variables decimal to binary , and count the different part.</p><p>So we can follow these step:</p><ul><li>將兩個變數，從十進位轉二進位，而轉十進位至二進位，如果是透過人工計算，便是將整數一直除以 2 直到商數為 0，然後將最後除得商數，再加上每一次的餘數反轉排序後，即可得到二進位：個人記十進位轉二進位的口訣為： <strong>最後商加反轉全餘數</strong>。 </li><li>再來統計不同的位數，即可得出答案。</li></ul><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><p>My Answer</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hammingDistance <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> big <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> small <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    big <span class="token operator">=</span> <span class="token punctuation">(</span>big<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    small <span class="token operator">=</span> <span class="token punctuation">(</span>small<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> bigLength <span class="token operator">=</span> big<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> currentDifferentNum <span class="token operator">=</span> bigLength <span class="token operator">-</span> small<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">var</span> distance <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> isNotSameLength <span class="token operator">=</span> currentDifferentNum <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isNotSameLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentDifferentNum<span class="token operator">--</span><span class="token punctuation">;</span>            small<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token string">'q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>big<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                distance<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        distance <span class="token operator">+</span><span class="token operator">=</span> big<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> small<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> distance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Best answer from other people and more faster!</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> hammingDistance <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/0/g</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="one_line_solution_result.png" alt=""></p><p><code>x ^ y</code>：<code>^</code> is Javascript bitwise operator, can get the same length binary string(if not same then add <code>1</code>) , can help us to identity the different positions.</p><ul><li><code>15 &amp; 9</code> result is <code>9</code> (<code>1111 &amp; 1001 = 1001</code>)</li><li><code>15 | 9</code> result is <code>15</code> (<code>1111 | 1001 = 1111</code>)</li><li><code>15 ^ 9</code> result is <code>6</code> (<code>1111 ^ 1001 = 0110</code>)</li></ul><p><code>toString(2)</code>：decimal to number.</p><p><code>replace(/0/g, &#39;&#39;)</code>：to replace all the same position.</p><h2 id="How-to-verify-algorithm"><a href="#How-to-verify-algorithm" class="headerlink" title="How to verify algorithm"></a>How to verify algorithm</h2><pre class="line-numbers language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// should be 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// should be 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// should be 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/mpp21x/algorithm-exercise/tree/master/461.hammingDistance" target="_blank" rel="noopener">This is my code of practice link.</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(1290) - Convert Binary Number in a Linked List to Integer(js/easy)</title>
      <link href="/2020/05/13/2020/leetcode-1290-js/"/>
      <url>/2020/05/13/2020/leetcode-1290-js/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/" target="_blank" rel="noopener">Convert Binary Number in a Linked List to Integer</a></li><li>difficulty：<code>easy</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given head which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.</p><p>Return the decimal value of the number in the linked list.</p><p>Example 1:</p><pre><code>Input: head = [1,0,1]Output: 5Explanation: (101) in base 2 = (5) in base 10</code></pre><p>Example 2:</p><pre><code>Input: head = [0]Output: 0</code></pre><p>Example 3:</p><pre><code>Input: head = [1]Output: 1</code></pre><p>Example 4:</p><pre><code>Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]Output: 18880</code></pre><p>Example 5:</p><pre><code>Input: head = [0,0]Output: 0</code></pre><p>Constraints:</p><ul><li>The Linked List is not empty.</li><li>Number of nodes will not exceed <code>30</code>.</li><li>Each node’s value is either <code>0</code> or <code>1</code>.</li></ul><h3 id="Question-Explanation-amp-how-to-solve-it"><a href="#Question-Explanation-amp-how-to-solve-it" class="headerlink" title="Question Explanation &amp; how to solve it"></a>Question Explanation &amp; how to solve it</h3><p>The variable <code>head</code> is a singly-linked list, and we just need to traverse the whole list, get each node value to a varable string called <code>binaryStr</code>.</p><p>And convert the <code>binaryStr</code> to Decimal, It’s finished. </p><p>Time complexity is <code>O(n²)</code>。</p><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> binaryStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        binaryStr <span class="token operator">+</span><span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binaryStr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="How-to-verify-algorithm"><a href="#How-to-verify-algorithm" class="headerlink" title="How to verify algorithm"></a>How to verify algorithm</h2><p>I write the code to simulate the leetcode input and verify the algorithm is fine.</p><p>Here is my code(use typescript).</p><pre class="line-numbers language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>    next<span class="token punctuation">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FakeNode</span> <span class="token keyword">implements</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>    val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    next<span class="token punctuation">:</span> FakeNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">createNodes</span><span class="token punctuation">(</span>nums<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> head<span class="token punctuation">;</span>    <span class="token keyword">let</span> lastOneNode<span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>            head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            lastOneNode <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastOneNode<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastOneNode <span class="token operator">=</span> lastOneNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> getDecimalValue <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>node<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> binaryStr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>val <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// console.log(`node.val :${node.val}`);</span>        binaryStr <span class="token operator">+</span><span class="token operator">=</span> node<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>binaryStr<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> head <span class="token operator">=</span> <span class="token function">createNodes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'verify the `head` is truly same as the leetcode input `head`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'\n----------------\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getDecimalValue</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p><a href="https://github.com/mpp21x/algorithm-exercise/tree/master/1290.convertBinaryNumberInLinkedListToInteger" target="_blank" rel="noopener">This is my code of practice link</a>。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(1302) - Deepest Leaves Sum (js/medium)</title>
      <link href="/2020/05/13/2020/leetcode-1302-js/"/>
      <url>/2020/05/13/2020/leetcode-1302-js/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Deepest Leaves Sum</a></li><li>difficulty：<code>medium</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a binary tree, return the sum of values of its deepest leaves.</p><p><img src="question.png" alt="示意圖"></p><pre><code>Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]Output: 15</code></pre><p>Constraints:</p><ul><li>The number of nodes in the tree is between 1 and 10^4.</li><li>The value of nodes is between 1 and 100.</li></ul><h3 id="Question-Explanation"><a href="#Question-Explanation" class="headerlink" title="Question Explanation"></a>Question Explanation</h3><p>簡單來說，給我們一個 Binary Tree 的變數 <code>root</code>，然後要我們計算出在 Binary Tree 最深的分支中節點，其總數為何。</p><h2 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h2><p>這題似乎應該被歸類在 easy，只需要清楚基本的 Binary Tree 如何遍歷所有節點一次即可，時間複雜度為 <code>O(n)</code>。</p><p>需要特別注意的是，在這題當中，參數 <code>Root</code> 同時是 Binary Tree 也同時是一個充滿節點數字的 Array，如果是 TypeScript ，type 會是這樣。</p><pre class="line-numbers language-typescript"><code class="language-typescript">type NumberArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">BinaryTreeNodeType</span> <span class="token keyword">extends</span> <span class="token class-name">NumberArr</span> <span class="token punctuation">{</span>    left<span class="token punctuation">:</span> BinaryTreeNodeType<span class="token punctuation">,</span>    right<span class="token punctuation">:</span> BinaryTreeNodeType<span class="token punctuation">,</span>    val<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span><span class="token keyword">var</span> deepestLeavesSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">:</span> BinaryTreeNodeType<span class="token punctuation">,</span> depthSum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>詳細的遍歷 Binary Tree 的步驟如下（數字為代稱，不一定為實際順序）：</p><ol><li><strong>保存統計同階層的總數</strong>：為了將同層（同深度）的每個節點數字加總，也就是滿足此題的答案，我們可以使用一個名為 <code>depthSum</code> 的 Array 來儲存，其屬性如下：<ul><li>key (嚴格來說是 <code>array</code> 的 index，並非是作為 <code>object</code> 的 key)：代表 <strong>階層深度</strong>。</li><li>value：代表 <strong>同階層的數字加總</strong>。    </li></ul></li><li><strong>取得當前階層的層數</strong>：一開始可以先初始化一個變數 <code>depth</code> 為 0 代表。</li><li><strong>加總數字到 <code>depthSum[depth]</code></strong>： 取得當前節點的 value，然後加總到前面所提的 <code>depthSum</code>，記得用 <code>depth</code> 作為 Index。</li><li><strong>遍歷節點</strong> 使用 recursive 來迭代進入每一個節點分支，由於每一個節點又有左邊以及右邊，所以至少呼叫兩次，並且再進去時先把 <code>depth + 1</code>。 </li></ol><p>透過用 recursive 的方式又有兩種，以上這兩種作法我都實作過，就放在以下的How to implement algorithm in javascript了：</p><ul><li>使用 <code>deepestLeavesSum</code> 本身做遞迴。</li><li>在 <code>deepestLeavesSum</code> 內部新增一個 function ，並且用其作為遞迴。</li></ul><ol start="5"><li><strong>檢查節點是否為空</strong>，這也有兩種做法：<ol><li>在 步驟4 的，呼叫前就先檢查， <strong>分支節點的 value</strong>，若不存在則不呼叫。</li><li>或是在進入當前的 <code>deepestLeavesSum</code>，進入後檢查 <strong>節點的 value</strong>，若不存在則不呼叫。</li></ol></li></ol><h2 id="How-to-Implement-algorithm-in-javascript"><a href="#How-to-Implement-algorithm-in-javascript" class="headerlink" title="How to Implement algorithm in javascript"></a>How to Implement algorithm in javascript</h2><p>由於這題是使用 binary tree ，要驗算比較麻煩，我另外在下方提供驗算的方法和流程。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 保存統計同階層的總數 2. 取得當前階層的層數</span><span class="token keyword">var</span> deepestLeavesSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> depthSum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 5. 檢查節點是否為空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 加總數字到 depthSum[depth]</span>    depthSum<span class="token punctuation">[</span>depth<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>depthSum<span class="token punctuation">[</span>depth<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. recursive</span>    <span class="token function">deepestLeavesSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depthSum<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">deepestLeavesSum</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depthSum<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> depthSum<span class="token punctuation">[</span>depthSum<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事實上這題我在一開始的寫法才是這個，上述的是參考別人的解答後再修改的，算採用 <strong>recursive 內部新增一個 function</strong> 以及 <strong>5.1 呼叫前就先檢查</strong>。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> deepestLeavesSum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> depthSum <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> traverse <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token punctuation">,</span> depthNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> depthNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depthSum<span class="token punctuation">[</span>depthNum<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            depthSum<span class="token punctuation">[</span>depthNum<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token punctuation">}</span>        depthSum<span class="token punctuation">[</span>depthNum<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> depthNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> depthNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> depthSum<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="How-to-verify-algorithm"><a href="#How-to-verify-algorithm" class="headerlink" title="How to verify algorithm"></a>How to verify algorithm</h2><p>首先我自己先設計一個 Binary Tree 如下：</p><p><img src="verify.jpg" alt=""></p><p>合計為 <code>6 + 9 + 13 + 15 = 43</code>，所以最後答案必然一定要為 <code>43</code>。</p><p>再來就是設計一個 Binary Tree，剛好前一陣子在拜讀 <em>Loiane Groner</em> 的 <code>learning javascript data structures and algorithms</code>，學到 ES5 如何實作 Binary Tree。</p><p>細節就不多講了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> Node <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> key<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> root <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getRoot <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> root<span class="token punctuation">;</span>    <span class="token keyword">let</span> nodesLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> insertNode <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> newNodeIsLessThanCurrent <span class="token operator">=</span> node<span class="token punctuation">.</span>val <span class="token operator">></span> newNode<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNodeIsLessThanCurrent <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>newNodeIsLessThanCurrent <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>newNodeIsLessThanCurrent <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">insertNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>insert <span class="token operator">=</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        nodesLength<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            root <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">insertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來要做的事情便是將 <code>[10, 8, 6, 9, 14, 13, 15]</code> 填入 Binary Tree，然後取出第一個節點，再放入 deepestLeavesSum 做驗算即可，驗算的程式碼如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 不要忘了要放上面的 BinarySearchTree 類別，這裡嫌太長就拿掉了。</span><span class="token keyword">const</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BinarySearchTree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">;</span>values<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> tree<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">deepestLeavesSum</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GitHub-紀錄"><a href="#GitHub-紀錄" class="headerlink" title="GitHub 紀錄"></a>GitHub 紀錄</h3><p>此次練習被收錄在我的 GitHub <a href="https://github.com/mpp21x/algorithm-exercise/tree/master/1302.Deepest-Leaves-Sum" target="_blank" rel="noopener">點我連結</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(796) - Rotate String (js/easy)</title>
      <link href="/2020/05/11/2020/leetcode-796-rotate-string/"/>
      <url>/2020/05/11/2020/leetcode-796-rotate-string/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/rotate-string/" target="_blank" rel="noopener">Rotate String</a></li><li>difficulty：<code>easy</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>We are given two strings, <code>A</code> and <code>B</code>.</p><p>A shift on <code>A</code> consists of taking string A and moving the leftmost character to the rightmost position. For example, if <code>A = &#39;abcde</code>‘, then it will be <code>&#39;bcdea&#39;</code> after one shift on <code>A</code>. Return <code>True</code> if and only if <code>A</code> can become <code>B</code> after some number of shifts on <code>A</code>.</p><pre><code>Example 1:Input: A = &#39;abcde&#39;, B = &#39;cdeab&#39;Output: trueExample 2:Input: A = &#39;abcde&#39;, B = &#39;abced&#39;Output: false</code></pre><p>Note:</p><ul><li><code>A</code> and <code>B</code> will have length at most 100.</li></ul><h3 id="Question-Explanation"><a href="#Question-Explanation" class="headerlink" title="Question Explanation"></a>Question Explanation</h3><p>給予兩個字串，判斷這兩個字串是否為同樣字串，只是起始的位置不同的字串而已，好比 <code>abc</code> 等同於 <code>bca</code> 或 <code>cab</code>。</p><h2 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h2><ol><li><strong>檢查長度</strong>：首先可以先驗證兩個參數的長度，不一樣就直接返回 <code>false</code>。</li><li><strong>比較運算</strong>：這部分目前有兩種方法 <strong>遍歷</strong> 以及 <strong>Repeat</strong></li></ol><h3 id="比較運算：遍歷"><a href="#比較運算：遍歷" class="headerlink" title="比較運算：遍歷"></a>比較運算：遍歷</h3><p>首先取 <code>A</code> 的第一個 字元，然後去搜尋其 在 <code>B</code> 的位置，然後遍歷比較，由於 <code>A</code> 和 <code>B</code> 遍歷的時候， index 不一樣，所以必須另外寫一個算式去將 <code>A</code> 的 index 轉換成 <code>B</code> 的 index，時間複雜度為 <code>O(n²)</code>。</p><h3 id="比較運算：Repeat"><a href="#比較運算：Repeat" class="headerlink" title="比較運算：Repeat"></a>比較運算：Repeat</h3><p>將 <code>A</code> 重複組成一遍，再使用 像是 <code>includes</code> 或是 <code>indexOf</code> 等 method 搜尋，時間複雜度為 <code>1</code>，明顯最快。</p><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><p>我們選擇用 <code>Repeat</code> 的方式去做 <strong>比較運算</strong></p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> rotateString <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> A<span class="token punctuation">.</span>length <span class="token operator">===</span> B<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> A<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(1282) - Group the People Given the Group Size They Belong To (js/medium)</title>
      <link href="/2020/05/10/2020/leetcode-1282/"/>
      <url>/2020/05/10/2020/leetcode-1282/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/" target="_blank" rel="noopener">Group the People Given the Group Size They Belong To</a></li><li>difficulty：<code>medium</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>There are n people whose IDs go from 0 to n - 1 and each person belongs exactly to one group. Given the array groupSizes of length n telling the group size each person belongs to, return the groups there are and the people’s IDs each group includes.</p><p>You can return any solution in any order and the same applies for IDs. Also, it is guaranteed that there exists at least one solution. </p><p>Example 1:</p><pre><code>Input: groupSizes = [3,3,3,3,3,1,3]Output: [[5],[0,1,2],[3,4,6]]Explanation: Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].</code></pre><p>Example 2:</p><pre><code>Input: groupSizes = [2,1,3,3,3,2]Output: [[1],[0,5],[2,3,4]]</code></pre><p>Constraints:</p><ul><li><code>groupSizes.length == n</code></li><li><code>1 &lt;= n &lt;= 500</code></li><li><code>1 &lt;= groupSizes[i] &lt;= n</code></li></ul><h3 id="Question-Explanation"><a href="#Question-Explanation" class="headerlink" title="Question Explanation"></a>Question Explanation</h3><p>給予一個充滿整數的陣列 <code>groupSizes</code>，這個陣列每一個整數都代表一個人其所屬的群組人數，而我們要做的便是給予每一個人 ID (從 0 到 <code>n-1</code>)，以及按任何順序歸類在同一個群組。</p><p>總之，最後要回傳一個二維陣列，陣列中的每一個陣列元素代表其群組，裡面必須包含每個人的 ID。</p><h2 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h2><p>我們要做的有以下幾個步驟（數字為代稱，不一定為實際順序）：</p><ol><li><strong>遍歷取出數字</strong>： <code>for</code> 遍歷 <code>groupSizes</code>，取出 <code>groupSize</code> </li><li><strong>將 ID 放至群組</strong>：將 For 迴圈的 <code>index</code> 作為每個人的 ID，放到各自所屬的一個變數 <code>tempGroup</code></li><li><strong>暫存尚未湊滿 groupSize 的 group</strong>：在上述的步驟 2 當中，變數 <code>tempGroup</code> 若尚未湊滿其應有的 <code>groupSize</code>，便不應該將其放至 <code>ans</code>，這時可以先準備一個 <code>tempGroups</code> 暫存這些 <code>tempGroup</code>，之後每次新增人數時以及將 <code>tempGroup</code> 放入 <code>ans</code> ，也優先從這裡取出。</li><li><strong>將群組放在最後欲回傳的變數</strong>：確認 <code>tempGroup</code> 人數是否湊滿，湊滿的話，便將其集合到一個陣列變數 <code>ans</code> 最後將此二維陣列回傳即可。</li></ol><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * @param {number[]} groupSizes * @return {number[][]} */</span><span class="token keyword">var</span> groupThePeople <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>groupSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> sizesLength <span class="token operator">=</span> groupSizes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">const</span> tempGroups <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 遍歷取出數字</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sizesLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> groupSize <span class="token operator">=</span> groupSizes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> tempGroup <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 3. 暫存尚未湊滿 groupSize 的 group</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempGroups<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>groupSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            tempGroup <span class="token operator">=</span> tempGroups<span class="token punctuation">[</span>groupSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 2. 將 ID 放至群組</span>        tempGroup<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        tempGroups<span class="token punctuation">[</span>groupSize<span class="token punctuation">]</span> <span class="token operator">=</span> tempGroup<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 4. 將群組放在最後欲回傳的變數</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tempGroup<span class="token punctuation">.</span>length <span class="token operator">===</span> groupSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> tempGroups<span class="token punctuation">[</span>groupSize<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="GitHub-紀錄"><a href="#GitHub-紀錄" class="headerlink" title="GitHub 紀錄"></a>GitHub 紀錄</h3><p>此次練習被收錄在我的 GitHub <a href="https://github.com/mpp21x/algorithm-exercise/tree/master/1282.Group-the-People-Given-the-Group-Size-They-Belong-To" target="_blank" rel="noopener">點我連結</a>。</p>]]></content>
      
      
      <categories>
          
          <category> leetcode algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(1431) - Kids With the Greatest Number of Candies (js/easy)</title>
      <link href="/2020/05/06/2020/leetcode-1431-kids-with-the-greatest-number-of-candies/"/>
      <url>/2020/05/06/2020/leetcode-1431-kids-with-the-greatest-number-of-candies/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/kids-with-the-greatest-number-of-candies/" target="_blank" rel="noopener">Kids With the Greatest Number of Candies</a></li><li>difficulty：<code>easy</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given the array candies and the integer extraCandies, where candies[i] represents the number of candies that the ith kid has.</p><p>For each kid check if there is a way to distribute extraCandies among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.</p><p>Example 1:</p><pre><code>Input: candies = [2,3,5,1,3], extraCandies = 3Output: [true,true,true,false,true] Explanation: Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. Kid 3 has 5 candies and this is already the greatest number of candies among the kids. Kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. Kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. </code></pre><p>Example 2:</p><pre><code>Input: candies = [4,2,1,1,2], extraCandies = 1Output: [true,false,false,false,false] Explanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.</code></pre><p>Example 3:</p><pre><code>Input: candies = [12,1,12], extraCandies = 10Output: [true,false,true]</code></pre><p>Constraints:</p><ul><li><code>2 &lt;= candies.length &lt;= 100</code></li><li><code>1 &lt;= candies[i] &lt;= 100</code></li><li><code>1 &lt;= extraCandies &lt;= 50</code></li></ul><h3 id="Question-Explanation"><a href="#Question-Explanation" class="headerlink" title="Question Explanation"></a>Question Explanation</h3><p>給予一個充滿整數的陣列 <code>candies</code> 以及一個指定的整數 <code>extraCandies</code>，我們需要取出 <code>candies</code> 中的每一個整數，再加上 <code>extraCandies</code> 之後，判斷其是否大於或等於  <code>candies</code> 中最大的那個數字，若是則為 <code>true</code> 否則為 <code>false</code>。</p><p>再將每一個整數的運算結果放在一個陣列後回傳，也就是說必須回傳一個與 <code>candies</code> 同等長度以及皆為 boolean 值的陣列。</p><h2 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h2><p>這題大致可以幾個步驟（數字為代稱，不一定為實際順序）：</p><ol><li><strong>遍歷取出數字</strong>：將 <code>candies</code> 一一取出。這一步驟讓時間複雜度至少會是 <code>O(n)</code>。</li><li><strong>運算及比較</strong>： 加上 <code>extraCandies</code> 之後進行比較。</li><li><strong>找出最大值</strong>： 找出 <code>candies</code> 最大的數值。</li></ol><p>這裡的 <strong>步驟 1</strong> 和 <strong>步驟 2</strong> ，在邏輯上必然有先後關聯的，可將步驟 1 和 步驟 2 可視為一體，而接下來則是思考 要先 <strong>步驟 3</strong> 或是 <strong>步驟 1 &amp; 2</strong>：</p><p>若先執行 <strong>步驟 1 &amp; 2</strong> -&gt; <strong>步驟 3</strong>，這樣一邊遍歷取出元素 又得重複尋找出最大值，時間複雜度為 <code>O(n²)</code></p><p>如果先 <strong>步驟 3</strong> -&gt; <strong>步驟 1 &amp; 2</strong>，一開始就找出最大數，時間複雜度為 <code>2n</code> 而已。</p><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><p>將上述過程轉化程式碼便是如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> kidsWithCandies <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>candies<span class="token punctuation">,</span> extraCandies<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 3. 找出最大值</span>    <span class="token keyword">const</span> maxNum <span class="token operator">=</span> candies<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>accumulator<span class="token punctuation">,</span> currentValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentValue <span class="token operator">></span> accumulator <span class="token operator">?</span> currentValue <span class="token punctuation">:</span> accumulator<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> candies<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> length <span class="token operator">=</span> candies<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1. 遍歷取出數字 以及 2. 運算及比較</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        answer<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span>candies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> extraCandies<span class="token punctuation">)</span> <span class="token operator">>=</span> maxNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> answer<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="GitHub-紀錄"><a href="#GitHub-紀錄" class="headerlink" title="GitHub 紀錄"></a>GitHub 紀錄</h3><p>此次練習被收錄在我的 GitHub <a href="https://github.com/mpp21x/algorithm-exercise/tree/master/1431.Kids_With_the_Greatest_Number_of_Candies" target="_blank" rel="noopener">點我連結</a>。 </p>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode(1) - Two Sum (js/easy)</title>
      <link href="/2020/05/06/2020/leetcode-1-two-sum/"/>
      <url>/2020/05/06/2020/leetcode-1-two-sum/</url>
      
        <content type="html"><![CDATA[<ul><li>link：<a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">Two Sum</a></li><li>difficulty：<code>easy</code></li><li>language：<code>javascript</code></li></ul><h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given a binary tree, return the sum of values of its deepest leaves.</p><p>Example 1:</p><pre><code>Given nums = [2, 7, 11, 15], target = 9,Because nums[0] + nums[1] = 2 + 7 = 9,return [0, 1].</code></pre><h3 id="Question-Explanation"><a href="#Question-Explanation" class="headerlink" title="Question Explanation"></a>Question Explanation</h3><p>給予一個數列 <code>nums</code> 以及一個指定的整數 <code>target</code>，我們必須找出在這個陣列中的某兩個數，其總和 必然與 <code>target</code> 相等，並將此二數的索引值放在一個陣列之後回傳出去。</p><p>另外，在陣列中，必然只有兩個數的總和跟 <strong>指定的整數</strong> 一樣，同時這兩個數必然是不同的數，不能為同一個數。</p><p>舉例來說：</p><p><code>nums</code> 為 <code>[2, 7, 11, 15]</code>，而 <code>target</code> 為 <code>9</code>，因為 <code>nums[0]</code> 以及 <code>nums[1]</code> 總和為 <code>9</code> 跟 <code>target</code> 一樣，所以答案就是 <code>[0, 1]</code>。</p><h2 id="解題思路"><a href="#解題思路" class="headerlink" title="解題思路"></a>解題思路</h2><h3 id="線索-1-Target"><a href="#線索-1-Target" class="headerlink" title="線索 1 Target"></a>線索 1 <code>Target</code></h3><p>首先我們知道，答案的兩個數總和（假設叫做 <code>a</code> 和 <code>b</code>），與 <code>target</code> 同等，透過簡單的推理可得知：</p><pre><code>target = a + btraget - a = b target - b = a </code></pre><p>我們可以透過 <code>target</code> 減去 <code>nums</code> 任一的數字，來得到另一個餘數，倘若此二數皆存在於 <code>nums</code> ，那就是我們想要找的答案 <code>a</code> 與 <code>b</code>。</p><p>所以答案必然是透過 <code>target</code> 進行加減的運算可得出。</p><h3 id="線索-2-流程"><a href="#線索-2-流程" class="headerlink" title="線索 2 流程"></a>線索 2 流程</h3><p>由於要得到答案，流程必然經過這幾個步驟（數字為代稱，不一定為實際順序）：</p><ol><li><p><strong>遍歷步驟</strong>：也就是一一取出 nums 的每一個數字，這一步驟讓時間複雜度至少會是 <code>O(n)</code>。</p></li><li><p><strong>取得待確認值步驟</strong>：取出 nums 的一個數字後，使用 <code>target</code> 減去此數的餘數，再來確認是否存在於 <code>nums</code>，即可。</p></li><li><p>*<em>確認餘數是否存在於 nums *</em>： 再來就是使用餘數，來確認是否存在於 <code>nums</code> ，且不能為同一 index，這個是這一題比較重要的環節，目前想到有兩種思路：</p><p> 3.1. <strong>遍歷搜尋</strong>  針對 <code>nums</code> 目前所運算到的位置之後的陣列，使用 <code>indexOf</code> 的方式來找出答案</p><p> 3.2 <strong>暫存 map 搜尋</strong> 將每次運算暫存於自定義的變數 <code>map</code>，搜尋時也一律從 <code>map</code> 當中搜尋。</p></li></ol><p>再來針對我們的 3.1 和 3.2 這兩種搜尋做解釋。</p><ul><li><p>3-1. 遍歷搜尋<br>最直覺的作法便是這個了，只要用餘數去搜尋是否存在於當前所遍歷的位置，之後剩餘的數，即可找到答案，但這樣子的做法，時間複雜度會近似於 <code>O(n²)</code> 了。</p></li><li><p>3.2. 暫存 map 搜尋</p></li></ul><p>每一次遍歷運算的時候，把待確認值放在一個變數 <code>map</code>，將待確認值作為 <code>key</code>，而 Index 作為 <code>value</code> ，每次運算完之後，都將運算結果儲存到這個 <code>map</code> 裡面。</p><p>當今天運算到 <code>b</code> 的時候，由於 <code>a</code> 已經被存入到 <code>map</code>，<code>map[target - nums[index]]</code> 就可以輕易找出答案並回傳了，時間複雜度也是 <code>O(n)</code>了。</p><p>當然，最後不忘了要回傳的是 <code>a</code> 和 <code>b</code> 在 <code>nums</code> 的索引值。</p><h2 id="How-to-implement-algorithm-in-javascript"><a href="#How-to-implement-algorithm-in-javascript" class="headerlink" title="How to implement algorithm in javascript"></a>How to implement algorithm in javascript</h2><p>很明顯的，最好的做法是使用 <strong>暫存 map 搜尋</strong>，接下來要做的，便是將上述過程轉化程式碼便是如下：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">var</span> twoSum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>map<span class="token punctuation">[</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        map<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 驗算</span><span class="token comment" spellcheck="true">// console.log(twoSum([2, 7, 11, 15], 9));</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="GitHub-紀錄"><a href="#GitHub-紀錄" class="headerlink" title="GitHub 紀錄"></a>GitHub 紀錄</h3><p>此次練習被收錄在我的 GitHub <a href="https://github.com/mpp21x/algorithm-exercise/tree/master/1.twoSum" target="_blank" rel="noopener">點我連結</a>。</p><h3 id="nums-的-length"><a href="#nums-的-length" class="headerlink" title="nums 的 length"></a>nums 的 length</h3><p>如果 <code>nums</code> 長度很大，可考慮把 <code>length</code> 塞給一個變數，避免每次都要運算陣列長度</p><h3 id="關於-3-1-遍歷搜尋-的時間複雜度運算的-O-n²-是怎麼算出來的？"><a href="#關於-3-1-遍歷搜尋-的時間複雜度運算的-O-n²-是怎麼算出來的？" class="headerlink" title="關於 3.1 遍歷搜尋 的時間複雜度運算的 O(n²) 是怎麼算出來的？"></a>關於 <strong>3.1 遍歷搜尋</strong> 的時間複雜度運算的 <code>O(n²)</code> 是怎麼算出來的？</h3><p>假設 <code>nums</code> 長度為 3：用此搜尋在需要花到最多時間的情境下，其步驟為：</p><ul><li>取出第 1 個數字 ，比較第 2 個數字，比較第 3 個數字： 花了 3 次操作。</li><li>取出第 2 個數字 ，比較第 3 個數字： 用了 2 次操作</li><li>總共 5 次操作<pre><code>1:2,32:3</code></pre></li></ul><p>不難發現出這 5 次操作與參數 n 的關係可以用一個類似等差數列可以求得，用數學符號表示即為：</p><ul><li><code>n</code> 為項數(也就是 <code>nums</code> 的長度)</li><li>$a\mathop{}\nolimits_{1}$ 為首項：固定為 1。</li><li>$a\mathop{}\nolimits_{n}$ 為末項：代表 <code>nums</code> 長度，如果 <code>nums = [1,2,3]</code> 的話，則為 3。</li><li>$S\mathop{}\nolimits_{n}$ 代表總耗費步驟：以 <code>nums = [1,2,3]</code> 為例的話，則是 5。</li></ul><p>$S\mathop{}\nolimits_{n}=\frac{n \left( a\mathop{}\nolimits_{1}+a\mathop{}\nolimits_{n} \right) }{2} - 1$</p><p>不難發現以上公式當中，次方(或平方)最高的便是 $n \left( a\mathop{}\nolimits_{1}+a\mathop{}\nolimits_{n} \right)$ ，這個函式幾乎等同 <code>O(n²)</code> 了</p><h3 id="關於-LaTex："><a href="#關於-LaTex：" class="headerlink" title="關於 LaTex："></a>關於 LaTex：</h3><p>為了要在 Hexo 用出 LaTex 公式，花了我四個小時多，找了許多篇文章設定…</p><ul><li><a href="https://zhuanlan.zhihu.com/p/105986034" target="_blank" rel="noopener">在 Hexo 博客中写出好看的Latex 公式</a><ul><li>更換渲染引擎即可完成，但這會導致所有的 prismjs 的程式碼渲染失去對應的語言顏色，只好作罷。</li></ul></li></ul><p>找到另一個方法，<a href="https://blog.yusanshi.com/2020-01-28-enable-latex-for-hexo/" target="_blank" rel="noopener">在此</a>，只需要安裝以下指令：</p><pre><code>npm install hexo-renderer-mathjax --save</code></pre><p>然後再搭配以下兩篇服用即可：</p><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery/issues/23" target="_blank" rel="noopener">关于 hexo-renderer-kramed 插件导致语法高亮失效的问题</a></li><li><a href="http://shomy.top/2016/10/22/hexo-markdown-mathjax/" target="_blank" rel="noopener">Hexo下mathjax的转义问题</a></li></ul><p>總結就是，需要修改 <code>nodes_modules/marked/lib/marked.js</code> 的兩個地方，主要就是把 <code>\\</code> 移除即可：</p><h4 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h4><pre><code>escape: /^\\([\\`*{}\[\]()# +\-.!_&gt;])/,</code></pre><p>改成</p><pre><code>escape: /^\\([`*{}\[\]()# +\-.!_&gt;])/,</code></pre><h4 id="em"><a href="#em" class="headerlink" title="em"></a>em</h4><pre><code>em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre><p>改成</p><pre><code>em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</code></pre>]]></content>
      
      
      <categories>
          
          <category> leetcode algorithms </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
            <tag> algorithm </tag>
            
            <tag> latex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重構訓練 &#39;GildedRose Factoring Kata&#39;</title>
      <link href="/2020/04/05/2020/gildedrose-factoring-kata/"/>
      <url>/2020/04/05/2020/gildedrose-factoring-kata/</url>
      
        <content type="html"><![CDATA[<p>這篇逐步介紹自己練習重構與 TDD 開發 Legacy Code Kata 的解題思路，題目是社群 <em>Domain Driven Design(DDD Taiwan)</em> 所舉辦的讀書會 Legacy Code 讀書會 3rd (Ch 8, 9) 所分享的重構練習題目。</p><p> <strong>GildedRose Refactoring Kata</strong></p><p>另外感謝這次的講者 <em>Blues</em> 與社群用心的準備，自己蠻喜歡這次的題目，這次重構時決定嘗試做一次筆記，對自己還是很有收穫的，未來如果自己舉辦公司讀書會的話，將本題作為練習題也是非常適合。</p><ul><li><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata" target="_blank" rel="noopener">GildedRose Refactoring Kata 題目程式碼來源</a></li><li><a href="https://hackmd.io/Lx84B9vHQ5irqcVhb7ebPQ?both" target="_blank" rel="noopener">講者 Blues 的題目介紹</a></li><li><a href="https://github.com/mpp21x/PHP-GildedRose-Refactoring-Kata" target="_blank" rel="noopener">本文的程式碼 Repository</a></li></ul><h5 id="legacy-code-重構前後"><a href="#legacy-code-重構前後" class="headerlink" title="legacy code 重構前後"></a>legacy code 重構前後</h5><p><img src="compare_refactoring.png" alt="重構前後比較"></p><h3 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h3><ul><li>按照預期完成的測試案例項目撰寫程式碼</li><li>重構 legacy code</li><li>TDD 新增新的需求</li><li>(補充)修正測試案例五漏洞</li></ul><h2 id="題目描述"><a href="#題目描述" class="headerlink" title="題目描述"></a>題目描述</h2><p>嗨，歡迎來到鍍金玫瑰團隊。如您所知，我們是一家小旅館，位於一線城市的黃金地段，旅館老闆是艾里森(Allison)。我們只銷售高級商品。不過每件商品都有一個銷售剩餘天數。</p><p>隨著時間的推移，商品的品質會不斷下降。</p><p>我們擁有一個可以更新庫存訊息的系統。有位名叫 River 的開發人員開發了這個系統，之後就離開了。</p><p>你的任務是將新功能添加到該系統中，以便我們可以開始銷售新種類的商品。</p><h3 id="題目原始需求"><a href="#題目原始需求" class="headerlink" title="題目原始需求"></a>題目原始需求</h3><ol><li>所有商品(item)都有一個銷售剩餘天數(SellIn)值，表示該商品必須在該值所代表的天數內銷售出去。</li><li>所有商品都有一個品質(Quality)值，表明該商品當前的品質。</li><li>每天結束時，系統會降低每個商品的上述兩個值。</li><li>一但商品過了銷售剩餘天數之後還沒未賣出，那麼其每日品質下降的速度就會加倍。</li><li>商品的品質不能為負數。</li><li>陳年乾酪(Aged Brie)的品質值隨著時間的推移，不減反增。</li><li>商品的品質的上限為50。</li><li>魔法錘(Sulfuras)是一個傳奇商品，其銷售剩餘天數和品質都不會變化。</li><li>劇院後台通行證(Backstage passes)，就像陳年乾酪一樣，其品質會隨著銷售剩餘天數的減少而提高-當離演出開始不到10天時，品質每日提高2；當不到5天時，品質值每日提高3，當演出結束後，品質歸0。</li><li>(新需求)：魔法(Conjured)商品每日品質下降速度是正常商品的2倍</li></ol><p>在擁有系統的需求之後，首先要做的便是將消化此需求，並轉為實務開發的測試案例，有了測試案例之後，即可依照測試案例開始來撰寫測試的程式碼。</p><h3 id="預期完成的測試案例項目"><a href="#預期完成的測試案例項目" class="headerlink" title="預期完成的測試案例項目"></a>預期完成的測試案例項目</h3><ol><li>原需求 3：確保一般的商品在每天結束後 ( 也就是 <code>updateQuality</code> 的 method 呼叫之後 )，系統會降低 <code>sellIn</code> 和 <code>quality</code> 兩種屬性，降低的程度由原程式碼所決定。</li><li>原需求 5：確保 <code>item</code> 的 <code>quality</code> 從不為負數</li><li>原需求 4 ：確保 <code>item</code> 的<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍</li><li>原需求 6：商品 Aged Brie 的物件 <code>item</code>，經過 <code>updateQuality</code> 呼叫之後，其 <code>quality</code> 不減反增，即使在 <code>sellIn</code> 歸零也是</li><li>原需求 7 ： 確保 <code>item</code> 的 <code>quality</code> 從來不超過 50</li><li>原需求 8：商品 Sulfuras 的物件 <code>item</code> ，其 <code>sellIn</code> 和 <code>quality</code> 初始化後，永久不變</li><li>原需求 9：商品 Backstage passes 的物件 <code>item</code> 須滿足下列條件：<ol><li>當 <code>sellIn</code> 為 9 到 5 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</li><li>當 <code>sellIn</code> 為 4 到 1 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</li><li>當 <code>sellIn</code> 為 0，<code>quality</code> 將直接歸零</li></ol></li><li>原需求 10 ：新增一個 Conjured 商品，<code>updateQuality</code> 所下降的值為正常商品的兩倍</li></ol><p>這裡想補充幾點：</p><ul><li>上述的需求中，如果有較描述模糊的地帶，這裏傾向先自己推理與腦補，實務上最好還是跟 PM 或客戶確認需求，避免雙方預期需求上的認知差異。</li><li>程式碼所使用的商品名稱來源是：<code>fixtures/texttest_fixture.php</code> 以及 <code>src/GildedRose</code>，例如：<ul><li>商品名稱：<code>Backstage</code>，在程式碼實際上名稱為 <code>Backstage passes to a TAFKAL80ETC concert</code></li></ul></li><li>撰寫測試案例的流程，盡可能地將有關聯性的測試案例安排在一起先行撰寫，使後續撰寫測試程式碼時，也可避免出現不必要的修改。</li></ul><h2 id="按照預期完成的測試案例項目撰寫程式碼"><a href="#按照預期完成的測試案例項目撰寫程式碼" class="headerlink" title="按照預期完成的測試案例項目撰寫程式碼"></a>按照預期完成的測試案例項目撰寫程式碼</h2><h3 id="測試案例一"><a href="#測試案例一" class="headerlink" title="測試案例一"></a>測試案例一</h3><ul><li>需求：確保一般的商品在每天結束後 ( 也就是 <code>updateQuality</code> 的 method 呼叫之後 )，系統會降低 <code>sellIn</code> 和 <code>quality</code> 兩種屬性，降低的程度由原程式碼所決定。</li></ul><p>既然我們已經擁有明確的測試案例以及需求了，接下來便是按照需求逐步完成測試，開啟預設的測試檔 <code>GildedRoseTest</code>，會看到下面這個 method：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"fixme"</span><span class="token punctuation">,</span> <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下來先進行基本的撰寫測試與重構，這裡開始描述實際撰寫測試的流程：</p><h5 id="實際撰寫測試的流程"><a href="#實際撰寫測試的流程" class="headerlink" title="實際撰寫測試的流程"></a>實際撰寫測試的流程</h5><ul><li>修改 <code>testFoo</code> method 名稱為 <code>testNormalProductUpdateQuality</code> 方便理解這個測試案例的情境。</li><li>執行測試，發現紅燈： <code>Failed asserting that two strings are identical</code></li><li>修改 <code>item</code> 的 <code>quality</code> 以及 <code>sellIn</code> 為 1 ，滿足測試。</li><li>修正第一個 <code>assertEquals</code> 中第一個參數的 <code>fixme</code> 為 <code>foo</code>，並且調整 <code>assertEquals</code> 為 <code>assertSame</code> ，確保較嚴謹的判斷。</li><li>新增一個 <code>assertEquals</code> 來測試 <code>quality</code> 是否如預期下降 1， 為什麼是 1 呢？這個數字是從查看物件 <code>GildedRose</code> 裡面得知的，需求裡面沒有提到這一塊所以就沿用原設計。</li><li>新增一個 <code>assertEquals</code> 來測試 <code>sellIn</code> 是否如預期下降 1，原因如上</li><li>執行測試，綠燈。</li></ul><p>最後完成如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再來便是重構測試程式碼的流程，首先重構 <code>GildedRoseTest</code>：</p><ul><li>extract <code>new Item(&quot;foo&quot;, 0, 0)</code> 到 property，確保 IDE 可以取得存取的變數來源是什麼型別。</li><li>重構使用到 <code>item</code> 物件的程式碼。</li><li>extract 測試目標的 <code>item</code> 到 <code>GildedRoseTest</code> 上，以便滿足後續測試時需要將參數一一帶入至測試的 method</li><li>extract 測試方法 <code>shouldBe</code> ，減少之後重複的程式碼</li><li>補足 PHPDoc 或是強型別 ，確保 IDE(PHPStorm) 知道每一個物件的型別為何。</li></ul><p>最後完成如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">GildedRoseTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** @var Item */</span>    <span class="token keyword">private</span> <span class="token variable">$item</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">shouldBe</span><span class="token punctuation">(</span>int <span class="token variable">$sellIn</span><span class="token punctuation">,</span> int <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token variable">$quality</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在重構完之後，再次執行測試，確認綠燈後便完成第一個測試案例，準備提交。</p><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/c3b0b14aec30b414bea0cfc961e23b6198a961ae" target="_blank" rel="noopener">git 測試案例一提交記錄</a></p><h3 id="測試案例二"><a href="#測試案例二" class="headerlink" title="測試案例二"></a>測試案例二</h3><ul><li>需求：確保 <code>item</code> 的 <code>quality</code> 從不為負數</li></ul><h5 id="實際撰寫測試的流程-1"><a href="#實際撰寫測試的流程-1" class="headerlink" title="實際撰寫測試的流程"></a>實際撰寫測試的流程</h5><ul><li>新增測試 method <code>testProductQualityOrSellInIsNeverBeLessThenZero</code></li><li>複製 測試案例一 的程式碼，並將 <code>sellIn</code> 以及 <code>quality</code> 改為 0，預期這兩個屬性在 <code>updateQuality</code> 之後，仍然為 0</li><li>執行測試，發現紅燈： <code>Failed asserting that -1 is identical to 0</code>，這是 <code>quality</code> 的錯誤。</li><li>修正 <code>GildedRose</code> 物件的程式碼滿足測試，修改的程式碼如下：</li></ul><p><img src="test_case_2.png" alt=""></p><ul><li>執行測試，綠燈，完成如下：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityOrSellInIsNeverBeLessThenZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>開始重構測試程式碼</p><ul><li>在 <code>GildedRose</code> 的屬性 <code>items</code> 新增 PHPDoc ，使 PHPStorm 可以讀取來源：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** @var Item[] */</span><span class="token keyword">private</span> <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>extract 建立 <code>GildedRose</code> 的那一段程式碼 extract 到一個新的 method 為 <code>updateQuality</code>，常用的程式碼以便之後重複使用：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>extract 建立 <code>Item</code> 的邏輯下面這一個 method，一樣是為了使常用的程式碼能重複使用 ：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createItem</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">,</span> int <span class="token variable">$sellIn</span><span class="token punctuation">,</span> int <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>執行測試，綠燈，完成的程式碼如下：</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityOrSellInIsNeverBeLessThenZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/5df69be2967dbf713c3243f995ab65e57e202530" target="_blank" rel="noopener">git 測試案例二提交記錄</a></p><h3 id="測試案例三"><a href="#測試案例三" class="headerlink" title="測試案例三"></a>測試案例三</h3><ul><li>需求：確保 <code>item</code> 的<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍</li></ul><p>實際撰寫測試的流程</p><ul><li>新增測試 method <code>testProductQualityDecreaseDoubleWhenSellInIsZero</code></li><li>初始化商品的 <code>sellIn</code> 為 0 ，然後 <code>quality</code> 為 2</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 為 0</li><li>執行測試，發現紅燈： <code>Failed asserting that 1 is identical to 0.</code>，看來原本的設計是沒有撰寫這一部分邏輯</li><li>補足需求：<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍，修改 <code>GildedRose</code> 程式碼如下：</li></ul><p><img src="test_case_3.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityDecreaseDoubleWhenSellInIsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/2ce47df88a4507855a287856deac3f16086ff979" target="_blank" rel="noopener">git 測試案例三提交記錄</a></p><h3 id="測試案例四"><a href="#測試案例四" class="headerlink" title="測試案例四"></a>測試案例四</h3><ul><li>需求：商品 Aged Brie 的物件 <code>item</code>，經過 <code>updateQuality</code> 呼叫之後，其 <code>quality</code> 不減反增，即使在 <code>sellIn</code> 歸零也是</li></ul><p>實際撰寫測試的流程</p><ul><li>新增測試 method <code>testAgedBrieUpdateQualityIsAlwaysIncrease</code></li><li>初始化商品的 <code>sellIn</code> 為 0 ，然後 <code>quality</code> 為 2，這裡的名稱改為 <code>Aged Brie</code></li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 為 3</li><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testAgedBrieUpdateQualityIsAlwaysIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Aged Brie"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/9a9c984395adf1dd03c248133a9cdbbeab90f6c7" target="_blank" rel="noopener">git 測試案例四提交記錄</a></p><h3 id="測試案例五"><a href="#測試案例五" class="headerlink" title="測試案例五"></a>測試案例五</h3><ul><li>需求： 確保 <code>item</code> 的 <code>quality</code> 從來不超過 50</li></ul><p>這一個案例想補充一下，按理來說應該可以測試兩個地方：</p><ul><li>初始化 <code>item</code> 的時候<code>quality</code> 就不允許 50 以上的參數</li><li>新增<code>quality</code> 的時候，到達 50 就不給予新增</li></ul><p>由於初始化不允許 50 以上的參數處理有兩種，要嘛自動降為 50 ，要嘛拋出 Exception ，但這裏題目也沒特別提到，我選擇自己腦補拋出 Exception。</p><p>實際撰寫測試的流程：</p><ul><li>新增一個 <code>InvalidItemQualityException</code> Exception 物件在 <code>src</code> 目錄</li><li>修改 <code>Item</code> 物件的 <code>__construct</code> method 如下</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$quality</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidItemQualityException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span> <span class="token operator">=</span> <span class="token variable">$sellIn</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token variable">$quality</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>新增測試 method <code>testProductQualityNeverGreaterThen_51</code></li><li>建立一個 <code>quality</code> 為 51 的 <code>Item</code>，並且預期拋出一個 <code>InvalidItemQualityException</code> 的 Exception</li><li>執行測試，綠燈</li><li>建立一個 <code>Aged Brie</code> 的物件， <code>quality</code> 為 50</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 仍然為 50</li><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityNeverGreaterThen_51</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">expectException</span><span class="token punctuation">(</span>InvalidItemQualityException<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Aged Brie"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/76b9003a8befd6d9de922111d43a1bd0c9bb9537" target="_blank" rel="noopener">git 測試案例五提交記錄</a></p><h3 id="測試案例六"><a href="#測試案例六" class="headerlink" title="測試案例六"></a>測試案例六</h3><ul><li>需求：魔法槌商品的物件 <code>item</code> ，其 <code>sellIn</code> 和 <code>quality</code> 初始化後，永久不變</li></ul><p>實際撰寫測試的流程：</p><ul><li>新增測試 method <code>testSulfurasSellInQuality</code></li><li>建立一個名稱為 <code>Sulfuras, Hand of Ragnaros</code> 的 <code>Item</code>， <code>sellIn</code> 和 <code>quality</code> 為 3</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>sellIn</code> 和 <code>quality</code> 仍然為 3</li><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testSulfurasSellInQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Sulfuras, Hand of Ragnaros"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/7d1b82d0632bf68471ef5f39c5bb5b20d94937b9" target="_blank" rel="noopener">git 測試案例六提交記錄</a></p><h3 id="測試案例七"><a href="#測試案例七" class="headerlink" title="測試案例七"></a>測試案例七</h3><ul><li>需求：商品 Backstage passes 的物件 <code>item</code> 須滿足下列條件：<ul><li>當 <code>sellIn</code> 為 <code>9</code> 到 <code>6</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</li><li>當 <code>sellIn</code> 為 <code>5</code> 到 <code>1</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</li><li>當 <code>sellIn</code> 為 <code>0</code>，<code>quality</code> 將直接歸零</li></ul></li></ul><p>這邊標題雖然打測試案例七，但實際上是增加 3 個測試案例，皆是針對 <code>Backstage</code> 商品的。</p><p>實際撰寫測試的流程：</p><h4 id="測試案例七之一-：-當-sellIn-為-9-到-6-的時候，updateQuality-一次提升-quality-2"><a href="#測試案例七之一-：-當-sellIn-為-9-到-6-的時候，updateQuality-一次提升-quality-2" class="headerlink" title="測試案例七之一 ： 當 sellIn 為 9 到 6 的時候，updateQuality 一次提升 quality 2"></a>測試案例七之一 ： 當 <code>sellIn</code> 為 <code>9</code> 到 <code>6</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</h4><ul><li>新增測試 method <code>testBackstagePassesQualityWhenSellInIsLessThanTenDay</code></li><li>建立一個名稱為 <code>Sulfuras, Hand of Ragnaros</code> 的 <code>Item</code>， <code>sellIn</code> 為 9 和 <code>quality</code> 為 0</li><li>測試在 <code>sellIn</code> 為 9 ~ 6 的時候，每次 <code>updateQuality</code> 都會新增 2</li><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityWhenSellInIsLessThanTenDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$expectedSellIn</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedQuality</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedSellIns</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$exceptedSellIns</span> <span class="token keyword">as</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$expectedSellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token variable">$exceptedQuality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$exceptedQuality</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/e777742aaf09f33fde73464791f9f0cbcbbfdef0" target="_blank" rel="noopener">git 測試案例七之一提交記錄</a></p><h4 id="測試案例七之二-：-當-sellIn-為-5-到-1-的時候，updateQuality-一次提升-quality-3"><a href="#測試案例七之二-：-當-sellIn-為-5-到-1-的時候，updateQuality-一次提升-quality-3" class="headerlink" title="測試案例七之二 ： 當 sellIn 為 5 到 1 的時候，updateQuality 一次提升 quality 3"></a>測試案例七之二 ： 當 <code>sellIn</code> 為 <code>5</code> 到 <code>1</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</h4><ul><li>新增測試 method <code>testBackstagePassesQualityWhenSellInIsLessThanFiveDay</code>，可以直接複製上一個 測試  。</li><li>測試在 <code>sellIn</code> 為 5 ~ 1 的時候，每次 <code>updateQuality</code> 都會新增 3</li><li>執行測試，綠燈</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityWhenSellInIsLessThanFiveDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$expectedSellIn</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedQuality</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedSellIns</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$exceptedSellIns</span> <span class="token keyword">as</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$expectedSellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token variable">$exceptedQuality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$exceptedQuality</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/5d8fccec9f06dc51d6e5f87f704ab8cabd53aea2" target="_blank" rel="noopener">git 測試案例七之二提交記錄</a></p><h4 id="測試案例七之三-：-當-sellIn-為-0，-quality-將直接歸零"><a href="#測試案例七之三-：-當-sellIn-為-0，-quality-將直接歸零" class="headerlink" title="測試案例七之三 ： 當 sellIn 為 0， quality 將直接歸零"></a>測試案例七之三 ： 當 <code>sellIn</code> 為 0， <code>quality</code> 將直接歸零</h4><ul><li>新增測試 method <code>testBackstagePassesQualityIsZeroWhenSellInIsZero</code>，可以直接複製上一個 測試  。</li><li>測試初始化 <code>sellIn</code> 為 1 而 <code>quality</code> 為 30 的時候， <code>updateQuality</code> 之後，預期 <code>quality</code> 為 0</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityIsZeroWhenSellInIsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>執行測試，紅燈： <code>Failed asserting that 33 is identical to 0.</code></li><li>修改 <code>GildedRose</code> 物件，滿足測試案例</li></ul><p><img src="test_case_7.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/903edbc48f3f3f755b8387896d3a3d43d045a830" target="_blank" rel="noopener">git 測試案例七之三提交記錄</a></p><h2 id="重構-legacy-code"><a href="#重構-legacy-code" class="headerlink" title="重構 legacy code"></a>重構 legacy code</h2><h3 id="重構波動拳程式碼的策略"><a href="#重構波動拳程式碼的策略" class="headerlink" title="重構波動拳程式碼的策略"></a>重構波動拳程式碼的策略</h3><p>我們已經完成了除了測試案例 9 的所有測試案例了，在測試的保護下我們即將對 legacy code 進行重構，也就是清除波動拳的程式碼 <code>updateQuality</code> 。</p><p>重構的目的是希望在保留既有的程式碼 <strong>功能</strong> 之下，優化程式碼的架構，我在處理波動拳的程式時(這題先不考慮以物件為單位分離職責的)，有自己常用的套路：</p><ul><li>可以合併的 if / else 或是可 extract 成一個 method 程式便 extract，並給予一個更容易了解的命名方式</li><li>充分確認流程的前因後果後，以 method 的方式分離職責，並調整執行的順序。</li><li>扁平化 if / else 結構，在 clean code 裡面，盡量避免 if / else 裡面有過多的 if / else ，可使用 <code>return</code> &amp; <code>switch</code> 來幫助我們完成這個任務</li><li>調整後不忘進行測試，確保調整是安全無慮的</li><li>專注測試一個測試案例，保持測試案例獨立性的同時，也保留舊有的 legacy code<ul><li>例如，將新增的 switch 放在舊有 legacy code 最前方，並專注一個 <code>case</code> 撰寫，執行完之後便 <code>return</code> ，逐步完成所有程式碼，最後即可移除 legacy code。  </li></ul></li></ul><p>其實本來想嘗試描述重構過程，但發現要描述整個流程過於繁瑣冗長，這裡就跳過了描述了，請直接看重構後的程式碼。</p><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/dd9287b1f8666f8916825c821b8ef3783b40b723" target="_blank" rel="noopener">git 重構後的提交記錄</a></p><h2 id="TDD-新增新的需求"><a href="#TDD-新增新的需求" class="headerlink" title="TDD 新增新的需求"></a>TDD 新增新的需求</h2><p>需求：新增一個 Conjured 商品，<code>updateQuality</code> 所下降的值為正常商品的兩倍</p><p>實際撰寫測試的流程：</p><ul><li>TDD 的開發流程為 <strong>紅燈</strong> → <strong>綠燈</strong> → <strong>重構</strong>，所以我們先按照需求寫測試，取得第一個紅燈</li><li>新增一個測試  method <code>testConjuredUpdateQuality</code></li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testConjuredUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Conjured Mana Cake"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>測試，紅燈： <code>Failed asserting that 2 is identical to 1.</code></li><li>再來修改 <code>GildedRose</code> 物件的 <code>updateItem</code> method 來滿足需求，首先修改 <code>updateItem</code> Method</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateItem</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...省略</span>        <span class="token keyword">case</span> <span class="token string">"Conjured Mana Cake"</span><span class="token punctuation">:</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateConjured</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateNoramlProduct</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>再來處理細節 <code>updateConjured</code> method</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateConjured</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$decreaseNum</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">-</span> <span class="token variable">$decreaseNum</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">-</span> <span class="token variable">$decreaseNum</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>執行測試，綠燈</li><li>目前為止，所有的測試案例便算是完成了，在 TDD 的流程，本該是綠燈後進行重構，但程式碼看下來沒有發現需要重構的部分，所以便在此結束</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/ca2c117051e3bf497b18d50d39987eacd473dc2e" target="_blank" rel="noopener">git TDD新增的提交記錄</a></p><h2 id="修正測試案例五漏洞"><a href="#修正測試案例五漏洞" class="headerlink" title="修正測試案例五漏洞"></a>修正測試案例五漏洞</h2><ul><li>需求： 確保商品劇院後台通行證(Backstage passes) <code>item</code> 的 <code>quality</code> 從來不超過 50</li></ul><p>剛剛在整理整個筆記的時候，意外發現 測試案例五 有一個漏網之魚便是商品劇院後台通行證(Backstage passes)，所以這裡再新增一個測試案例來補足這一部分。</p><p>實際撰寫測試的流程：</p><ul><li>新增測試 method <code>testBackstagePassesQualityNeverGreaterThen_51</code></li><li>依照 劇院後台通行證 不同的 3 種情況，新增 quality 數值，來撰寫測試，預期皆不超過 50</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityNeverGreaterThen_51</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>執行測試，紅燈：<code>Failed asserting that 51 is identical to 50.</code></li><li>基本上寫完第一個是紅燈，再來我們調整物件 <code>GildedRose</code></li><li>這邊調整的部分較多，首先先在 <code>updateItems</code> 的 method 新增一個新的 method</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setItmQualityWhenTooMuch</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ... 省略</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">setItmQualityWhenTooMuch</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>這樣的設計是傾向，無論 <code>quality</code> 怎麼加，只要超過 50 便重設至 50，這樣寫的好處是可以一次適用所有的產品，而且考量到原本的設計還會先用 <code>if</code> 檢查，兩種寫法相較之下，無疑前者的寫法更為簡潔有力。</li><li>所以這裏我們不忘移除掉在 <code>updateAgedBrieQuality</code> 裡面不必要的檢查</li></ul><p><img src="update_check.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commits/master" target="_blank" rel="noopener">git 修正測試案例五漏洞 的提交</a></p><h5 id="其他參考連結"><a href="#其他參考連結" class="headerlink" title="其他參考連結"></a>其他參考連結</h5><p>這裏順便附上讀書會其他人分享的解題思路。</p><ul><li><p><a href="https://github.com/holyblue/GildedRoseKata" target="_blank" rel="noopener">講者 Blues 的解題思路</a></p></li><li><p><a href="https://gist.github.com/FongX777/fb36c10fb698e69adbf027044cfc88ec" target="_blank" rel="noopener">主辦社群成員 Fong 的解題</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> clean code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> refactoring </tag>
            
            <tag> kata </tag>
            
            <tag> unit-test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Reflection</title>
      <link href="/2020/03/24/2020/php-reflection/"/>
      <url>/2020/03/24/2020/php-reflection/</url>
      
        <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><ul><li>Annotation 假註解，真程式碼</li><li>何謂 Annotation &amp; Reflection</li><li>實作 PHP Annotation</li></ul><h2 id="Annotation-假註解，真程式碼"><a href="#Annotation-假註解，真程式碼" class="headerlink" title="Annotation 假註解，真程式碼"></a>Annotation 假註解，真程式碼</h2><p>從 Doctrine 開始說起， Symfony 是我所接觸的第一個 PHP Framework，使用 Symfony  所整合的 PHP ORM Library Doctrine ，在  Doctrine 當中，曾經有一段程式碼是我當時作為一個新手工程師無法理解的，就是所謂的 Annotation，也就是下方註解當中的 <code>@ORM\Entity</code> 部分的程式碼。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\</span>ORM<span class="token punctuation">\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @ORM\Entity     * @ORM\Table(name="products")     */</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**          * @ORM\Id         * @ORM\Column(type="integer")         * @ORM\GeneratedValue         */</span>        <span class="token keyword">protected</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**          * @ORM\Column(type="string")          */</span>        <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// .. (other code)</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這是一個定義 <code>Entity</code> 的 PHP 程式碼， <code>Entity</code> 就如同 Laravel 裡面的 <code>Model</code> 一樣，被視為對照到資料庫的一個資料表的物件，然而一直使我不能明白的是，上述的註解為什麼是有 <strong>功能</strong> 的，而並非只是一個單純的註解，包含了 <code>@ORM\Entity</code> 、 <code>@ORM\Table(name=&quot;products&quot;)</code> 等等</p><p>要是不設定這些參數的話，便無法使用 Doctrine ，換言之，這些註解並非是提供給開發者看的註解而已，而是實際影響程式運作的程式碼。</p><h2 id="何謂-Annotation-amp-Reflection"><a href="#何謂-Annotation-amp-Reflection" class="headerlink" title="何謂 Annotation &amp; Reflection"></a>何謂 Annotation &amp; Reflection</h2><blockquote><p>我的解讀： Annotation 是一種語法設計，用以將註解的 PHPDoc，裡面所設置的 meta-data(通常是 class )自動代理與處理其指定的物件或其 property , method 的一種設計</p></blockquote><p>後來看到 Doctrine 官方說明後，了解到由於 PHP 本身並沒有提供 Annotation 的實作，所以 Doctrine 開發一個 Component(Library) 來實作這一部分，然而這不足以讓我明白 <strong>為什麼註解解變成了程式碼</strong>，到底是用了什麼魔法才使 PHP 可以執行到註解裡面的程式？，然而這個問題後來被擱在一旁，也就忘記繼續了解。</p><p>一直到後來接觸 Laravel ，想要了解 Laravel 的 Dependency Injection 機制之後，才發現原來 PHP 有個叫做 <code>Reflection</code> 的 API 和相關物件可以使用，這便是 <strong>為什麼註解解變成了程式碼</strong> 的真正原因，這個原因就是：</p><blockquote><p>使用 PHP Reflection 便可以讀取到物件中的註解，從而實作 PHP Annotation</p></blockquote><p>這同時也是 Doctrine 和 Laravel 實作依賴注入所使用到的方法。</p><h2 id="實作-PHP-Annotation"><a href="#實作-PHP-Annotation" class="headerlink" title="實作 PHP Annotation"></a>實作 PHP Annotation</h2><p>那麼，Reflection 又可以做什麼呢？Reflection 是一個可以在執行階段時，取得 以類別名稱為參數，並取得該類別自身的 property 和 Method 、甚至是註解的一種物件。</p><p>這裡簡單實作一個例子，我們在一個類別 <code>Foo</code> 裡面的 private property 定義一個 Annotation ，並搭配使用 Annotation 將其實體化出來。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * @MyAnnotation(myProperty="value")    */</span>    <span class="token keyword">private</span> <span class="token variable">$bar</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$reflectionClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span>Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這裏 <code>var_dump</code> 出來所顯示的是一個字串，其值如下：</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*** @MyAnnotation(myProperty="value")*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再來是要解析這一段註解，這裏我們為方便，直接使用 Doctrine 的 Library <code>AnnotationReader</code> 來協助我們解析。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Annotations<span class="token punctuation">\</span>AnnotationReader</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @MyAnnotation(myProperty="value")     */</span>    <span class="token keyword">private</span> <span class="token variable">$bar</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @Annotation */</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$myProperty</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$reflectionClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span>Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$reader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$myAnnotation</span> <span class="token operator">=</span> <span class="token variable">$reader</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPropertyAnnotation</span><span class="token punctuation">(</span>    <span class="token variable">$property</span><span class="token punctuation">,</span>    MyAnnotation<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$myAnnotation</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>這段程式碼的流程主要是這樣</p><ul><li>建立 ReflectionClass 物件，並指向 <code>Foo</code> 這個物件宣告所在的位置。</li><li>然後利用 ReflectionClass 讀取指定名稱的屬性 <code>bar</code> ，還可以取出 <code>bar</code> 的 PHP Doc</li><li>印出 <code>bar</code> 的 Doc</li><li>再搭配 Doctrine 的 <code>AnnotationReader</code> ，呼叫 <code>getPropertyAnnotation</code> 去讀取屬性並且將此屬性的 PHP Doc 與其指向的類別和指定 property value 設定好之後，實體化出來。</li><li>印出 <code>$myAnnotation</code></li></ul><h5 id="補充："><a href="#補充：" class="headerlink" title="補充："></a>補充：</h5><p>在 Reflection 的幫助下便可實作到以下幾個設計</p><ul><li>PHP Annotation</li><li>Dependency Injection</li><li>Aspect Oriented Programming(AOP)：<a href="https://hyperf.wiki/#/zh-cn/aop" target="_blank" rel="noopener">可參考 Hyperf Framework 的 AOP</a></li></ul><p>或許有了 Reflection 可能還可以做到更多功能，本篇並非要完全理解 Reflection ，而是理解如何實作 Annotation 以及 Laravel 的 DI 為目的而已</p><h5 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h5><ul><li><a href="https://php-annotations.readthedocs.io/en/latest/UsingAnnotations.html" target="_blank" rel="noopener">Understanding annotations</a></li><li><a href="https://www.doctrine-project.org/projects/doctrine-annotations/en/1.6/index.html" target="_blank" rel="noopener">Doctrine Annotation</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> aspect-oriented programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
