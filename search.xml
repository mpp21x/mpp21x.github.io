<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GildedRose Factoring Kata </title>
      <link href="/2020/04/05/gildedrose-factoring-kata/"/>
      <url>/2020/04/05/gildedrose-factoring-kata/</url>
      
        <content type="html"><![CDATA[<p>這篇逐步介紹自己練習重構與 TDD 開發 Legacy Code Kata 的解題思路，題目是社群 <em>Domain Driven Design(DDD Taiwan)</em> 所舉辦的讀書會 Legacy Code 讀書會 3rd (Ch 8, 9) 所分享的重構練習題目。</p><p> <strong>GildedRose Refactoring Kata</strong></p><p>另外感謝這次的講者 <em>Blues</em> 與社群用心的準備，自己蠻喜歡這次的題目，這次重構時決定嘗試做一次筆記，對自己還是很有收穫的，未來如果自己舉辦公司讀書會的話，將本題作為練習題也是非常適合。</p><ul><li><a href="https://github.com/emilybache/GildedRose-Refactoring-Kata" target="_blank" rel="noopener">GildedRose Refactoring Kata 題目程式碼來源</a></li><li><a href="https://hackmd.io/Lx84B9vHQ5irqcVhb7ebPQ?both" target="_blank" rel="noopener">講者 Blues 的題目介紹</a></li><li><a href="https://github.com/mpp21x/PHP-GildedRose-Refactoring-Kata" target="_blank" rel="noopener">本文的程式碼 Repository</a></li></ul><h5 id="legacy-code-重構前後"><a href="#legacy-code-重構前後" class="headerlink" title="legacy code 重構前後"></a>legacy code 重構前後</h5><p><img src="compare_refactoring.png" alt="重構前後比較"></p><h3 id="開發流程"><a href="#開發流程" class="headerlink" title="開發流程"></a>開發流程</h3><ul><li>按照預期完成的測試案例項目撰寫程式碼</li><li>重構 legacy code</li><li>TDD 新增新的需求</li><li>(補充)修正測試案例五漏洞</li></ul><h2 id="題目描述"><a href="#題目描述" class="headerlink" title="題目描述"></a>題目描述</h2><p>嗨，歡迎來到鍍金玫瑰團隊。如您所知，我們是一家小旅館，位於一線城市的黃金地段，旅館老闆是艾里森(Allison)。我們只銷售高級商品。不過每件商品都有一個銷售剩餘天數。</p><p>隨著時間的推移，商品的品質會不斷下降。</p><p>我們擁有一個可以更新庫存訊息的系統。有位名叫 River 的開發人員開發了這個系統，之後就離開了。</p><p>你的任務是將新功能添加到該系統中，以便我們可以開始銷售新種類的商品。</p><h3 id="題目原始需求"><a href="#題目原始需求" class="headerlink" title="題目原始需求"></a>題目原始需求</h3><ol><li>所有商品(item)都有一個銷售剩餘天數(SellIn)值，表示該商品必須在該值所代表的天數內銷售出去。</li><li>所有商品都有一個品質(Quality)值，表明該商品當前的品質。</li><li>每天結束時，系統會降低每個商品的上述兩個值。</li><li>一但商品過了銷售剩餘天數之後還沒未賣出，那麼其每日品質下降的速度就會加倍。</li><li>商品的品質不能為負數。</li><li>陳年乾酪(Aged Brie)的品質值隨著時間的推移，不減反增。</li><li>商品的品質的上限為50。</li><li>魔法錘(Sulfuras)是一個傳奇商品，其銷售剩餘天數和品質都不會變化。</li><li>劇院後台通行證(Backstage passes)，就像陳年乾酪一樣，其品質會隨著銷售剩餘天數的減少而提高-當離演出開始不到10天時，品質每日提高2；當不到5天時，品質值每日提高3，當演出結束後，品質歸0。</li><li>(新需求)：魔法(Conjured)商品每日品質下降速度是正常商品的2倍</li></ol><p>在擁有系統的需求之後，首先要做的便是將消化此需求，並轉為實務開發的測試案例，有了測試案例之後，即可依照測試案例開始來撰寫測試的程式碼。</p><h3 id="預期完成的測試案例項目"><a href="#預期完成的測試案例項目" class="headerlink" title="預期完成的測試案例項目"></a>預期完成的測試案例項目</h3><ol><li>原需求 3：確保一般的商品在每天結束後 ( 也就是 <code>updateQuality</code> 的 method 呼叫之後 )，系統會降低 <code>sellIn</code> 和 <code>quality</code> 兩種屬性，降低的程度由原程式碼所決定。</li><li>原需求 5：確保 <code>item</code> 的 <code>quality</code> 從不為負數</li><li>原需求 4 ：確保 <code>item</code> 的<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍</li><li>原需求 6：商品 Aged Brie 的物件 <code>item</code>，經過 <code>updateQuality</code> 呼叫之後，其 <code>quality</code> 不減反增，即使在 <code>sellIn</code> 歸零也是</li><li>原需求 7 ： 確保 <code>item</code> 的 <code>quality</code> 從來不超過 50</li><li>原需求 8：商品 Sulfuras 的物件 <code>item</code> ，其 <code>sellIn</code> 和 <code>quality</code> 初始化後，永久不變</li><li>原需求 9：商品 Backstage passes 的物件 <code>item</code> 須滿足下列條件：<ol><li>當 <code>sellIn</code> 為 9 到 5 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</li><li>當 <code>sellIn</code> 為 4 到 1 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</li><li>當 <code>sellIn</code> 為 0，<code>quality</code> 將直接歸零</li></ol></li><li>原需求 10 ：新增一個 Conjured 商品，<code>updateQuality</code> 所下降的值為正常商品的兩倍</li></ol><p>這裡想補充幾點：</p><ul><li>上述的需求中，如果有較描述模糊的地帶，這裏傾向先自己推理與腦補，實務上最好還是跟 PM 或客戶確認需求，避免雙方預期需求上的認知差異。</li><li>程式碼所使用的商品名稱來源是：<code>fixtures/texttest_fixture.php</code> 以及 <code>src/GildedRose</code>，例如：<ul><li>商品名稱：<code>Backstage</code>，在程式碼實際上名稱為 <code>Backstage passes to a TAFKAL80ETC concert</code></li></ul></li><li>撰寫測試案例的流程，盡可能地將有關聯性的測試案例安排在一起先行撰寫，使後續撰寫測試程式碼時，也可避免出現不必要的修改。</li></ul><h2 id="按照預期完成的測試案例項目撰寫程式碼"><a href="#按照預期完成的測試案例項目撰寫程式碼" class="headerlink" title="按照預期完成的測試案例項目撰寫程式碼"></a>按照預期完成的測試案例項目撰寫程式碼</h2><h3 id="測試案例一"><a href="#測試案例一" class="headerlink" title="測試案例一"></a>測試案例一</h3><ul><li>需求：確保一般的商品在每天結束後 ( 也就是 <code>updateQuality</code> 的 method 呼叫之後 )，系統會降低 <code>sellIn</code> 和 <code>quality</code> 兩種屬性，降低的程度由原程式碼所決定。</li></ul><p>既然我們已經擁有明確的測試案例以及需求了，接下來便是按照需求逐步完成測試，開啟預設的測試檔 <code>GildedRoseTest</code>，會看到下面這個 method：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"fixme"</span><span class="token punctuation">,</span> <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下來先進行基本的撰寫測試與重構，這裡開始描述實際撰寫測試的流程：</p><h5 id="實際撰寫測試的流程"><a href="#實際撰寫測試的流程" class="headerlink" title="實際撰寫測試的流程"></a>實際撰寫測試的流程</h5><ul><li>修改 <code>testFoo</code> method 名稱為 <code>testNormalProductUpdateQuality</code> 方便理解這個測試案例的情境。</li><li>執行測試，發現紅燈： <code>Failed asserting that two strings are identical</code></li><li>修改 <code>item</code> 的 <code>quality</code> 以及 <code>sellIn</code> 為 1 ，滿足測試。</li><li>修正第一個 <code>assertEquals</code> 中第一個參數的 <code>fixme</code> 為 <code>foo</code>，並且調整 <code>assertEquals</code> 為 <code>assertSame</code> ，確保較嚴謹的判斷。</li><li>新增一個 <code>assertEquals</code> 來測試 <code>quality</code> 是否如預期下降 1， 為什麼是 1 呢？這個數字是從查看物件 <code>GildedRose</code> 裡面得知的，需求裡面沒有提到這一塊所以就沿用原設計。</li><li>新增一個 <code>assertEquals</code> 來測試 <code>sellIn</code> 是否如預期下降 1，原因如上</li><li>執行測試，綠燈。</li></ul><p>最後完成如下：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再來便是重構測試程式碼的流程，首先重構 <code>GildedRoseTest</code>：</p><ul><li>extract <code>new Item(&quot;foo&quot;, 0, 0)</code> 到 property，確保 IDE 可以取得存取的變數來源是什麼型別。</li><li>重構使用到 <code>item</code> 物件的程式碼。</li><li>extract 測試目標的 <code>item</code> 到 <code>GildedRoseTest</code> 上，以便滿足後續測試時需要將參數一一帶入至測試的 method</li><li>extract 測試方法 <code>shouldBe</code> ，減少之後重複的程式碼</li><li>補足 PHPDoc 或是強型別 ，確保 IDE(PHPStorm) 知道每一個物件的型別為何。</li></ul><p>最後完成如下：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">GildedRoseTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** @var Item */</span>    <span class="token keyword">private</span> <span class="token variable">$item</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">shouldBe</span><span class="token punctuation">(</span>int <span class="token variable">$sellIn</span><span class="token punctuation">,</span> int <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token variable">$quality</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在重構完之後，再次執行測試，確認綠燈後便完成第一個測試案例，準備提交。</p><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/c3b0b14aec30b414bea0cfc961e23b6198a961ae" target="_blank" rel="noopener">git 測試案例一提交記錄</a></p><h3 id="測試案例二"><a href="#測試案例二" class="headerlink" title="測試案例二"></a>測試案例二</h3><ul><li>需求：確保 <code>item</code> 的 <code>quality</code> 從不為負數</li></ul><h5 id="實際撰寫測試的流程-1"><a href="#實際撰寫測試的流程-1" class="headerlink" title="實際撰寫測試的流程"></a>實際撰寫測試的流程</h5><ul><li>新增測試 method <code>testProductQualityOrSellInIsNeverBeLessThenZero</code></li><li>複製 測試案例一 的程式碼，並將 <code>sellIn</code> 以及 <code>quality</code> 改為 0，預期這兩個屬性在 <code>updateQuality</code> 之後，仍然為 0</li><li>執行測試，發現紅燈： <code>Failed asserting that -1 is identical to 0</code>，這是 <code>quality</code> 的錯誤。</li><li>修正 <code>GildedRose</code> 物件的程式碼滿足測試，修改的程式碼如下：</li></ul><p><img src="test_case_2.png" alt=""></p><ul><li>執行測試，綠燈，完成如下：</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityOrSellInIsNeverBeLessThenZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>開始重構測試程式碼</p><ul><li>在 <code>GildedRose</code> 的屬性 <code>items</code> 新增 PHPDoc ，使 PHPStorm 可以讀取來源：</li></ul><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/** @var Item[] */</span><span class="token keyword">private</span> <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><ul><li>extract 建立 <code>GildedRose</code> 的那一段程式碼 extract 到一個新的 method 為 <code>updateQuality</code>，常用的程式碼以便之後重複使用：</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GildedRose</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$gildedRose</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>extract 建立 <code>Item</code> 的邏輯下面這一個 method，一樣是為了使常用的程式碼能重複使用 ：</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">createItem</span><span class="token punctuation">(</span>string <span class="token variable">$name</span><span class="token punctuation">,</span> int <span class="token variable">$sellIn</span><span class="token punctuation">,</span> int <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>執行測試，綠燈，完成的程式碼如下：</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testNormalProductUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">assertSame</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityOrSellInIsNeverBeLessThenZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/5df69be2967dbf713c3243f995ab65e57e202530" target="_blank" rel="noopener">git 測試案例二提交記錄</a></p><h3 id="測試案例三"><a href="#測試案例三" class="headerlink" title="測試案例三"></a>測試案例三</h3><ul><li>需求：確保 <code>item</code> 的<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍</li></ul><p>實際撰寫測試的流程</p><ul><li>新增測試 method <code>testProductQualityDecreaseDoubleWhenSellInIsZero</code></li><li>初始化商品的 <code>sellIn</code> 為 0 ，然後 <code>quality</code> 為 2</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 為 0</li><li>執行測試，發現紅燈： <code>Failed asserting that 1 is identical to 0.</code>，看來原本的設計是沒有撰寫這一部分邏輯</li><li>補足需求：<code>sellIn</code> 為零時，若 <code>quality</code> 還不等於零，其下降速度是原本的兩倍，修改 <code>GildedRose</code> 程式碼如下：</li></ul><p><img src="test_case_3.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityDecreaseDoubleWhenSellInIsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/2ce47df88a4507855a287856deac3f16086ff979" target="_blank" rel="noopener">git 測試案例三提交記錄</a></p><h3 id="測試案例四"><a href="#測試案例四" class="headerlink" title="測試案例四"></a>測試案例四</h3><ul><li>需求：商品 Aged Brie 的物件 <code>item</code>，經過 <code>updateQuality</code> 呼叫之後，其 <code>quality</code> 不減反增，即使在 <code>sellIn</code> 歸零也是</li></ul><p>實際撰寫測試的流程</p><ul><li>新增測試 method <code>testAgedBrieUpdateQualityIsAlwaysIncrease</code></li><li>初始化商品的 <code>sellIn</code> 為 0 ，然後 <code>quality</code> 為 2，這裡的名稱改為 <code>Aged Brie</code></li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 為 3</li><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testAgedBrieUpdateQualityIsAlwaysIncrease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Aged Brie"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/9a9c984395adf1dd03c248133a9cdbbeab90f6c7" target="_blank" rel="noopener">git 測試案例四提交記錄</a></p><h3 id="測試案例五"><a href="#測試案例五" class="headerlink" title="測試案例五"></a>測試案例五</h3><ul><li>需求： 確保 <code>item</code> 的 <code>quality</code> 從來不超過 50</li></ul><p>這一個案例想補充一下，按理來說應該可以測試兩個地方：</p><ul><li>初始化 <code>item</code> 的時候<code>quality</code> 就不允許 50 以上的參數</li><li>新增<code>quality</code> 的時候，到達 50 就不給予新增</li></ul><p>由於初始化不允許 50 以上的參數處理有兩種，要嘛自動降為 50 ，要嘛拋出 Exception ，但這裏題目也沒特別提到，我選擇自己腦補拋出 Exception。</p><p>實際撰寫測試的流程：</p><ul><li>新增一個 <code>InvalidItemQualityException</code> Exception 物件在 <code>src</code> 目錄</li><li>修改 <code>Item</code> 物件的 <code>__construct</code> method 如下</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$sellIn</span><span class="token punctuation">,</span> <span class="token variable">$quality</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$quality</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidItemQualityException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span> <span class="token operator">=</span> <span class="token variable">$sellIn</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token variable">$quality</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>新增測試 method <code>testProductQualityNeverGreaterThen_51</code></li><li>建立一個 <code>quality</code> 為 51 的 <code>Item</code>，並且預期拋出一個 <code>InvalidItemQualityException</code> 的 Exception</li><li>執行測試，綠燈</li><li>建立一個 <code>Aged Brie</code> 的物件， <code>quality</code> 為 50</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>quality</code> 仍然為 50</li><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testProductQualityNeverGreaterThen_51</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">expectException</span><span class="token punctuation">(</span>InvalidItemQualityException<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Aged Brie"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/76b9003a8befd6d9de922111d43a1bd0c9bb9537" target="_blank" rel="noopener">git 測試案例五提交記錄</a></p><h3 id="測試案例六"><a href="#測試案例六" class="headerlink" title="測試案例六"></a>測試案例六</h3><ul><li>需求：魔法槌商品的物件 <code>item</code> ，其 <code>sellIn</code> 和 <code>quality</code> 初始化後，永久不變</li></ul><p>實際撰寫測試的流程：</p><ul><li>新增測試 method <code>testSulfurasSellInQuality</code></li><li>建立一個名稱為 <code>Sulfuras, Hand of Ragnaros</code> 的 <code>Item</code>， <code>sellIn</code> 和 <code>quality</code> 為 3</li><li>撰寫測試，預期在 <code>updateQuality</code> 之後， <code>sellIn</code> 和 <code>quality</code> 仍然為 3</li><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testSulfurasSellInQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Sulfuras, Hand of Ragnaros"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/7d1b82d0632bf68471ef5f39c5bb5b20d94937b9" target="_blank" rel="noopener">git 測試案例六提交記錄</a></p><h3 id="測試案例七"><a href="#測試案例七" class="headerlink" title="測試案例七"></a>測試案例七</h3><ul><li>需求：商品 Backstage passes 的物件 <code>item</code> 須滿足下列條件：<ul><li>當 <code>sellIn</code> 為 <code>9</code> 到 <code>6</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</li><li>當 <code>sellIn</code> 為 <code>5</code> 到 <code>1</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</li><li>當 <code>sellIn</code> 為 <code>0</code>，<code>quality</code> 將直接歸零</li></ul></li></ul><p>這邊標題雖然打測試案例七，但實際上是增加 3 個測試案例，皆是針對 <code>Backstage</code> 商品的。</p><p>實際撰寫測試的流程：</p><h4 id="測試案例七之一-：-當-sellIn-為-9-到-6-的時候，updateQuality-一次提升-quality-2"><a href="#測試案例七之一-：-當-sellIn-為-9-到-6-的時候，updateQuality-一次提升-quality-2" class="headerlink" title="測試案例七之一 ： 當 sellIn 為 9 到 6 的時候，updateQuality 一次提升 quality 2"></a>測試案例七之一 ： 當 <code>sellIn</code> 為 <code>9</code> 到 <code>6</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 2</h4><ul><li>新增測試 method <code>testBackstagePassesQualityWhenSellInIsLessThanTenDay</code></li><li>建立一個名稱為 <code>Sulfuras, Hand of Ragnaros</code> 的 <code>Item</code>， <code>sellIn</code> 為 9 和 <code>quality</code> 為 0</li><li>測試在 <code>sellIn</code> 為 9 ~ 6 的時候，每次 <code>updateQuality</code> 都會新增 2</li><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityWhenSellInIsLessThanTenDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$expectedSellIn</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedQuality</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedSellIns</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$exceptedSellIns</span> <span class="token keyword">as</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$expectedSellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token variable">$exceptedQuality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$exceptedQuality</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/e777742aaf09f33fde73464791f9f0cbcbbfdef0" target="_blank" rel="noopener">git 測試案例七之一提交記錄</a></p><h4 id="測試案例七之二-：-當-sellIn-為-5-到-1-的時候，updateQuality-一次提升-quality-3"><a href="#測試案例七之二-：-當-sellIn-為-5-到-1-的時候，updateQuality-一次提升-quality-3" class="headerlink" title="測試案例七之二 ： 當 sellIn 為 5 到 1 的時候，updateQuality 一次提升 quality 3"></a>測試案例七之二 ： 當 <code>sellIn</code> 為 <code>5</code> 到 <code>1</code> 的時候，<code>updateQuality</code> 一次提升 <code>quality</code> 3</h4><ul><li>新增測試 method <code>testBackstagePassesQualityWhenSellInIsLessThanFiveDay</code>，可以直接複製上一個 測試  。</li><li>測試在 <code>sellIn</code> 為 5 ~ 1 的時候，每次 <code>updateQuality</code> 都會新增 3</li><li>執行測試，綠燈</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityWhenSellInIsLessThanFiveDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$expectedSellIn</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedQuality</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token variable">$exceptedSellIns</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$exceptedSellIns</span> <span class="token keyword">as</span> <span class="token variable">$expectedSellIn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$expectedSellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token variable">$expectedSellIn</span><span class="token punctuation">,</span> <span class="token variable">$exceptedQuality</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$exceptedQuality</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/5d8fccec9f06dc51d6e5f87f704ab8cabd53aea2" target="_blank" rel="noopener">git 測試案例七之二提交記錄</a></p><h4 id="測試案例七之三-：-當-sellIn-為-0，-quality-將直接歸零"><a href="#測試案例七之三-：-當-sellIn-為-0，-quality-將直接歸零" class="headerlink" title="測試案例七之三 ： 當 sellIn 為 0， quality 將直接歸零"></a>測試案例七之三 ： 當 <code>sellIn</code> 為 0， <code>quality</code> 將直接歸零</h4><ul><li>新增測試 method <code>testBackstagePassesQualityIsZeroWhenSellInIsZero</code>，可以直接複製上一個 測試  。</li><li>測試初始化 <code>sellIn</code> 為 1 而 <code>quality</code> 為 30 的時候， <code>updateQuality</code> 之後，預期 <code>quality</code> 為 0</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityIsZeroWhenSellInIsZero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>執行測試，紅燈： <code>Failed asserting that 33 is identical to 0.</code></li><li>修改 <code>GildedRose</code> 物件，滿足測試案例</li></ul><p><img src="test_case_7.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/903edbc48f3f3f755b8387896d3a3d43d045a830" target="_blank" rel="noopener">git 測試案例七之三提交記錄</a></p><h2 id="重構-legacy-code"><a href="#重構-legacy-code" class="headerlink" title="重構 legacy code"></a>重構 legacy code</h2><h3 id="重構波動拳程式碼的策略"><a href="#重構波動拳程式碼的策略" class="headerlink" title="重構波動拳程式碼的策略"></a>重構波動拳程式碼的策略</h3><p>我們已經完成了除了測試案例 9 的所有測試案例了，在測試的保護下我們即將對 legacy code 進行重構，也就是清除波動拳的程式碼 <code>updateQuality</code> 。</p><p>重構的目的是希望在保留既有的程式碼 <strong>功能</strong> 之下，優化程式碼的架構，我在處理波動拳的程式時(這題先不考慮以物件為單位分離職責的)，有自己常用的套路：</p><ul><li>可以合併的 if / else 或是可 extract 成一個 method 程式便 extract，並給予一個更容易了解的命名方式</li><li>充分確認流程的前因後果後，以 method 的方式分離職責，並調整執行的順序。</li><li>扁平化 if / else 結構，在 clean code 裡面，盡量避免 if / else 裡面有過多的 if / else ，可使用 <code>return</code> &amp; <code>switch</code> 來幫助我們完成這個任務</li><li>調整後不忘進行測試，確保調整是安全無慮的</li><li>專注測試一個測試案例，保持測試案例獨立性的同時，也保留舊有的 legacy code<ul><li>例如，將新增的 switch 放在舊有 legacy code 最前方，並專注一個 <code>case</code> 撰寫，執行完之後便 <code>return</code> ，逐步完成所有程式碼，最後即可移除 legacy code。  </li></ul></li></ul><p>其實本來想嘗試描述重構過程，但發現要描述整個流程過於繁瑣冗長，這裡就跳過了描述了，請直接看重構後的程式碼。</p><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/dd9287b1f8666f8916825c821b8ef3783b40b723" target="_blank" rel="noopener">git 重構後的提交記錄</a></p><h2 id="TDD-新增新的需求"><a href="#TDD-新增新的需求" class="headerlink" title="TDD 新增新的需求"></a>TDD 新增新的需求</h2><p>需求：新增一個 Conjured 商品，<code>updateQuality</code> 所下降的值為正常商品的兩倍</p><p>實際撰寫測試的流程：</p><ul><li>TDD 的開發流程為 <strong>紅燈</strong> → <strong>綠燈</strong> → <strong>重構</strong>，所以我們先按照需求寫測試，取得第一個紅燈</li><li>新增一個測試  method <code>testConjuredUpdateQuality</code></li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testConjuredUpdateQuality</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Conjured Mana Cake"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>測試，紅燈： <code>Failed asserting that 2 is identical to 1.</code></li><li>再來修改 <code>GildedRose</code> 物件的 <code>updateItem</code> method 來滿足需求，首先修改 <code>updateItem</code> Method</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateItem</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...省略</span>        <span class="token keyword">case</span> <span class="token string">"Conjured Mana Cake"</span><span class="token punctuation">:</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateConjured</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateNoramlProduct</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>再來處理細節 <code>updateConjured</code> method</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">updateConjured</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">:</span> void<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">sellIn</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$decreaseNum</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">-</span> <span class="token variable">$decreaseNum</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">-</span> <span class="token variable">$decreaseNum</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>執行測試，綠燈</li><li>目前為止，所有的測試案例便算是完成了，在 TDD 的流程，本該是綠燈後進行重構，但程式碼看下來沒有發現需要重構的部分，所以便在此結束</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commit/ca2c117051e3bf497b18d50d39987eacd473dc2e" target="_blank" rel="noopener">git TDD新增的提交記錄</a></p><h2 id="修正測試案例五漏洞"><a href="#修正測試案例五漏洞" class="headerlink" title="修正測試案例五漏洞"></a>修正測試案例五漏洞</h2><ul><li>需求： 確保商品劇院後台通行證(Backstage passes) <code>item</code> 的 <code>quality</code> 從來不超過 50</li></ul><p>剛剛在整理整個筆記的時候，意外發現 測試案例五 有一個漏網之魚便是商品劇院後台通行證(Backstage passes)，所以這裡再新增一個測試案例來補足這一部分。</p><p>實際撰寫測試的流程：</p><ul><li>新增測試 method <code>testBackstagePassesQualityNeverGreaterThen_51</code></li><li>依照 劇院後台通行證 不同的 3 種情況，新增 quality 數值，來撰寫測試，預期皆不超過 50</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">testBackstagePassesQualityNeverGreaterThen_51</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">createItem</span><span class="token punctuation">(</span><span class="token string">"Backstage passes to a TAFKAL80ETC concert"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">shouldBe</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>執行測試，紅燈：<code>Failed asserting that 51 is identical to 50.</code></li><li>基本上寫完第一個是紅燈，再來我們調整物件 <code>GildedRose</code></li><li>這邊調整的部分較多，首先先在 <code>updateItems</code> 的 method 新增一個新的 method</li></ul><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">updateItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">items</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">updateItem</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setItmQualityWhenTooMuch</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ... 省略</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function">setItmQualityWhenTooMuch</span><span class="token punctuation">(</span>Item <span class="token variable">$item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">></span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$item</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">quality</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>這樣的設計是傾向，無論 <code>quality</code> 怎麼加，只要超過 50 便重設至 50，這樣寫的好處是可以一次適用所有的產品，而且考量到原本的設計還會先用 <code>if</code> 檢查，兩種寫法相較之下，無疑前者的寫法更為簡潔有力。</li><li>所以這裏我們不忘移除掉在 <code>updateAgedBrieQuality</code> 裡面不必要的檢查</li></ul><p><img src="update_check.png" alt=""></p><ul><li>執行測試，綠燈</li></ul><p><a href="https://github.com/mpp21x/PHP-GildedRoseRefactoringKata/commits/master" target="_blank" rel="noopener">git 修正測試案例五漏洞 的提交</a></p><h5 id="其他參考連結"><a href="#其他參考連結" class="headerlink" title="其他參考連結"></a>其他參考連結</h5><p>這裏順便附上讀書會其他人分享的解題思路。</p><ul><li><p><a href="https://github.com/holyblue/GildedRoseKata" target="_blank" rel="noopener">講者 Blues 的解題思路</a></p></li><li><p><a href="https://gist.github.com/FongX777/fb36c10fb698e69adbf027044cfc88ec" target="_blank" rel="noopener">主辦社群成員 Fong 的解題</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> refactoring </tag>
            
            <tag> kata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP Reflection</title>
      <link href="/2020/03/24/php-reflection/"/>
      <url>/2020/03/24/php-reflection/</url>
      
        <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><ul><li>Annotation 假註解，真程式碼</li><li>何謂 Annotation &amp; Reflection</li><li>實作 PHP Annotation</li></ul><h2 id="Annotation-假註解，真程式碼"><a href="#Annotation-假註解，真程式碼" class="headerlink" title="Annotation 假註解，真程式碼"></a>Annotation 假註解，真程式碼</h2><p>從 Doctrine 開始說起， Symfony 是我所接觸的第一個 PHP Framework，使用 Symfony  所整合的 PHP ORM Library Doctrine ，在  Doctrine 當中，曾經有一段程式碼是我當時作為一個新手工程師無法理解的，就是所謂的 Annotation，也就是下方註解當中的 <code>@ORM\Entity</code> 部分的程式碼。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\</span>ORM<span class="token punctuation">\</span>Mapping</span> <span class="token keyword">as</span> <span class="token constant">ORM</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @ORM\Entity     * @ORM\Table(name="products")     */</span>    <span class="token keyword">class</span> <span class="token class-name">Product</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**          * @ORM\Id         * @ORM\Column(type="integer")         * @ORM\GeneratedValue         */</span>        <span class="token keyword">protected</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**          * @ORM\Column(type="string")          */</span>        <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// .. (other code)</span>    <span class="token punctuation">}</span></code></pre><p>這是一個定義 <code>Entity</code> 的 PHP 程式碼， <code>Entity</code> 就如同 Laravel 裡面的 <code>Model</code> 一樣，被視為對照到資料庫的一個資料表的物件，然而一直使我不能明白的是，上述的註解為什麼是有 <strong>功能</strong> 的，而並非只是一個單純的註解，包含了 <code>@ORM\Entity</code> 、 <code>@ORM\Table(name=&quot;products&quot;)</code> 等等</p><p>要是不設定這些參數的話，便無法使用 Doctrine ，換言之，這些註解並非是提供給開發者看的註解而已，而是實際影響程式運作的程式碼。</p><h2 id="何謂-Annotation-amp-Reflection"><a href="#何謂-Annotation-amp-Reflection" class="headerlink" title="何謂 Annotation &amp; Reflection"></a>何謂 Annotation &amp; Reflection</h2><blockquote><p>我的解讀： Annotation 是一種語法設計，用以將註解的 PHPDoc，裡面所設置的 meta-data(通常是 class )自動代理與處理其指定的物件或其 property , method 的一種設計</p></blockquote><p>後來看到 Doctrine 官方說明後，了解到由於 PHP 本身並沒有提供 Annotation 的實作，所以 Doctrine 開發一個 Component(Library) 來實作這一部分，然而這不足以讓我明白 <strong>為什麼註解解變成了程式碼</strong>，到底是用了什麼魔法才使 PHP 可以執行到註解裡面的程式？，然而這個問題後來被擱在一旁，也就忘記繼續了解。</p><p>一直到後來接觸 Laravel ，想要了解 Laravel 的 Dependency Injection 機制之後，才發現原來 PHP 有個叫做 <code>Reflection</code> 的 API 和相關物件可以使用，這便是 <strong>為什麼註解解變成了程式碼</strong> 的真正原因，這個原因就是：</p><blockquote><p>使用 PHP Reflection 便可以讀取到物件中的註解，從而實作 PHP Annotation</p></blockquote><p>這同時也是 Doctrine 和 Laravel 實作依賴注入所使用到的方法。</p><h2 id="實作-PHP-Annotation"><a href="#實作-PHP-Annotation" class="headerlink" title="實作 PHP Annotation"></a>實作 PHP Annotation</h2><p>那麼，Reflection 又可以做什麼呢？Reflection 是一個可以在執行階段時，取得 以類別名稱為參數，並取得該類別自身的 property 和 Method 、甚至是註解的一種物件。</p><p>這裡簡單實作一個例子，我們在一個類別 <code>Foo</code> 裡面的 private property 定義一個 Annotation ，並搭配使用 Annotation 將其實體化出來。</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * @MyAnnotation(myProperty="value")    */</span>    <span class="token keyword">private</span> <span class="token variable">$bar</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$reflectionClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span>Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>這裏 <code>var_dump</code> 出來所顯示的是一個字串，其值如下：</p><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">/*** @MyAnnotation(myProperty="value")*/</span></code></pre><p>再來是要解析這一段註解，這裏我們為方便，直接使用 Doctrine 的 Library <code>AnnotationReader</code> 來協助我們解析。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token punctuation">.</span> <span class="token string">'/vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Doctrine<span class="token punctuation">\</span>Common<span class="token punctuation">\</span>Annotations<span class="token punctuation">\</span>AnnotationReader</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @MyAnnotation(myProperty="value")     */</span>    <span class="token keyword">private</span> <span class="token variable">$bar</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @Annotation */</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotation</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$myProperty</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$reflectionClass</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span>Foo<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflectionClass</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$property</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$reader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$myAnnotation</span> <span class="token operator">=</span> <span class="token variable">$reader</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getPropertyAnnotation</span><span class="token punctuation">(</span>    <span class="token variable">$property</span><span class="token punctuation">,</span>    MyAnnotation<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$myAnnotation</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>這段程式碼的流程主要是這樣</p><ul><li>建立 ReflectionClass 物件，並指向 <code>Foo</code> 這個物件宣告所在的位置。</li><li>然後利用 ReflectionClass 讀取指定名稱的屬性 <code>bar</code> ，還可以取出 <code>bar</code> 的 PHP Doc</li><li>印出 <code>bar</code> 的 Doc</li><li>再搭配 Doctrine 的 <code>AnnotationReader</code> ，呼叫 <code>getPropertyAnnotation</code> 去讀取屬性並且將此屬性的 PHP Doc 與其指向的類別和指定 property value 設定好之後，實體化出來。</li><li>印出 <code>$myAnnotation</code></li></ul><h5 id="補充："><a href="#補充：" class="headerlink" title="補充："></a>補充：</h5><p>在 Reflection 的幫助下便可實作到以下幾個設計</p><ul><li>PHP Annotation</li><li>Dependency Injection</li><li>Aspect Oriented Programming(AOP)：<a href="https://hyperf.wiki/#/zh-cn/aop" target="_blank" rel="noopener">可參考 Hyperf Framework 的 AOP</a></li></ul><p>或許有了 Reflection 可能還可以做到更多功能，本篇並非要完全理解 Reflection ，而是理解如何實作 Annotation 以及 Laravel 的 DI 為目的而已</p><h5 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h5><ul><li><a href="https://php-annotations.readthedocs.io/en/latest/UsingAnnotations.html" target="_blank" rel="noopener">Understanding annotations</a></li><li><a href="https://www.doctrine-project.org/projects/doctrine-annotations/en/1.6/index.html" target="_blank" rel="noopener">Doctrine Annotation</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
